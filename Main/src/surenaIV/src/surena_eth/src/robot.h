#ifndef ROBOT_H
#define ROBOT_H

#include <QObject>
#include <QDebug>
#include <QTimer>

#include "qnode.h"
#include "epos.h"
#include "pingmodel.h"
#include "pidcontroller.h"
#include"QsLog/QsLog.h"

class Robot : public QObject
{
    Q_OBJECT
    Epos Epos4;
    QNode *_rosNode;
    QTimer timer;
    QTimer _hommingTimer;
    QTimer _initialTimer;
    QTimer _statusCheckTimer;
    double HomeTime;
    QList<int> _motorPosition;
    bool Initialized=false;
    float CurrentAbsPositions[40];
    int HommingState=0;
    float CurrentIncPositions[40];
        QVector <double>absolute_q0;

  // //  const double offset[12]={ -790 ,-86, 315, 433, 614, -266, -33 ,374, -277+39, 593, 748, 339-8};
   // //const double offset[12]={ -770-57 ,-86, 315, 433, 614, -246+57 , -33 ,374, -277+39, 573+57 , 728-57 , 339-8};
//    const double offset[12]={ -779 ,-86, 315, 433, 614, -255 , -33 ,374, -277+39, 582 , 737 , 339-8};
   // const double offset[12]={ -779-57 ,-86, 315, 433, 614, -255+57 , -33 ,374, -277+39, 582+57 , 737-57 , 339-8};
//    const double offset[12]={ -775 ,-86, 315, 433, 614, -245 , -33 ,374, -277, 573 , 728 , 339};
    //using home stand first check
    //const double offset[12]={ -772 ,-143,-127, 443, 669, -264 ,  342 ,399, 324, 575 , 739 , 270};
//    const double offset[13]={ -780 ,-144,-114, 443, 646, -250 ,  337 ,399, 574, 577 , 738 , 294,-727};
//before senario

//const double offset[29]={ -787 ,-114,-113, 446, 638, -247 ,  334 ,397, 2990, 576 , 738 , 295,    -855+296,-889+2276-228+50,2881,2044-569,0,0,0,0,693+296,3642-2276+228,-344,2099+569,0,0,0,0 ,-770-100/*-110*/};//gooth


     //   const double offset[29]={ -787 ,-114,-113, 446-11, 638, -247 ,  334 ,397, 573, 576 , 738 , 295,    -855+296,-889+2276-228+50,2881,2044-569,0,0,0,0,693+296,3642-2276+228,-344,2099+569,0,0,0,0 ,-770-100/*-110*/};//gooth

//   const double offset[29]={ -787 ,-149,-116, 440, 653, -245 ,  340 ,399, 573, 579 , 736 , 299,    -855+296,-889+2276-228+50,2881,2044-569,0,0,0,0,693+296,3642-2276+228,-344,2099+569,0,0,0,0 ,-770-100/*-110*/};//gooth

//home 14 aban stand
  // const double offset[29]={-779, -144, -111, 445, 659, -256, 345, 401, 545, 584, 743, 296,    -855+296,-889+2276-228+50,2881,2044-569,0,0,0,0,693+296,3642-2276+228,-344,2099+569,0,0,0,0 ,-770-100/*-110*/};

        //home 14 aban modify
       // const double offset[29]={-779, -144, -111, 445/*-5*/, 659, -256, 345, 401, 545, 584, 743, 296,    -855+296,-889+2276-228+50,2881,2044-569,0,0,0,0,693+296,3642-2276+228,-344,2099+569,0,0,0,0 ,-770-100/*-110*/};
//home 14 aban modify using ft

//const double offset[29]={-788, -115, -113, 443, 626, -258, 346, 402, 545, 586, 741, 297,    -855+296,-889+2276-228+50,2881,2044-569,0,0,0,0,693+296,3642-2276+228,-344,2099+569,0,0,0,0 ,-770-100/*-110*/};


//goonia ru hava hip pith and knee
//ABS  0 = -791
//ABS  1 = -119
//ABS  2 = -124
//ABS  3 = 425
//ABS  4 = 628
//ABS  5 = -253
//ABS  6 = 352
//ABS  7 = 406
//ABS  8 = 548
//ABS  9 = 587
//ABS  10 = 739
//ABS  11 = 296

//goonia  yaw
//ABS  0 = -791
//ABS  1 = -119
//ABS  2 = -124
//ABS  3 = 425
//ABS  4 = 630
//ABS  5 = -254
//ABS  6 = 353
//ABS  7 = 406
//ABS  8 = 518
//ABS  9 = 587
//ABS  10 = 739
//ABS  11 = 289

//ft
//ABS  0 = -789
//ABS  1 = -125
//ABS  2 = -124
//ABS  3 = 425
//ABS  4 = 627
//ABS  5 = -259
//ABS  6 = 353
//ABS  7 = 406
//ABS  8 = 518
//ABS  9 = 588
//ABS  10 = 740
//ABS  11 = 289

//const double offset[29]={-788, -115, -113, 443-6, 626, -258, 346, 402, 545, 586, 741, 297,    -855+296,-889+2276-228+50,2881,2044-569,0,0,0,0,693+296,3642-2276+228,-344,2099+569,0,0,0,0 ,-770-100/*-110*/};

//ABS  0 = -779
//ABS  1 = -126
//ABS  2 = -107
//ABS  3 = 431
//ABS  4 = 640
//ABS  5 = -263
//ABS  6 = 341
//ABS  7 = 403
//ABS  8 = 547
//ABS  9 = 580
//ABS  10 = 739
//ABS  11 = 310

// magnetic abs on hip pitch
//const double offset[29]={-789, -125, -124, 425-4, 627, -259, 353, 401, 518+26, 588,  740,  289 , -855+296,-889+2276-228+50,2881,2044-569,0,0,0,0,693+296,3642-2276+228,-344,2099+569,0,0,0,0 ,-770-100/*-110*/};

        // optic abs on hip pitch
        //const double offset[29]={-789, -125, -124, -1689, 627, -259, 353, 401, 518+26, 588,  740,  289 , -855+296,-889+2276-228+50,2881,2044-569,0,0,0,0,693+296,3642-2276+228,-344,2099+569,0,0,0,0 ,-770-100/*-110*/};

//home by maleki
//const double offset[29]={-779, -126, -107, 431, 640, -263, 341, 403, 547, 580,  739,  310, -855+296,-889+2276-228+50,2881,2044-569,0,0,0,0,693+296,3642-2276+228,-344,2099+569,0,0,0,0 ,-770-100/*-110*/};


    const double offset[29]={-789, -125+41, -124, 3763, 627, -259, 353, 401, 518+26, 588,  740,  289 , -906+296,-889+2276-228+50,2893,2045-569,0,0,0,0,637+296,3590-2276+228,-431,2730/*1967+569*/,0,0,0,0 ,-770-100/*-110*/};

//        ABS  0 = -793
//        ABS  1 = -139
//        ABS  2 = -125
//        ABS  3 = 3745
//        ABS  4 = 655
//        ABS  5 = -258
//        ABS  6 = 343
//        ABS  7 = 398
//        ABS  8 = 550
//        ABS  9 = 584
//        ABS  10 = 750
//        ABS  11 = 279
            //    const double offset[29]={-793, -139, -125, 3745, 655, -258, 343, 398, 550, 584,  750,  279 , -906+296,-889+2276-228+50,2893,2045-569,0,0,0,0,637+296,3590-2276+228,-431,2639/*1967+569*/,0,0,0,0 ,-770-100/*-110*/};

    const double ratio[29]={ 1,-1,1,-1,1,1,-1,1,-1,-1,-1,-1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1};
    //const double Direction[12]={1,-1,1,-1,1,1,-1,1,-1,1,1,-1};

        const double Direction[29]={1,1,1,-1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1};
        const double KP[29]={1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    const int HomeOrder[29]={0,1,2,3,8,9,5,4,6,7,11,10,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    int currentHomeIndex=0;
    int homeLoopNumber=0;

    int pos;
    bool dir=false;
    PIDController pid;
public:

    //=================================================================================================
    explicit Robot(QObject *parent ,int argc, char **argv);
    //=================================================================================================


    void WaitMs(int ms);


    double Move2Pose(double max, double t_local, double t_start, double t_end);

signals:


public slots:
        void ReadErrors();
           bool ReadAllInitialPositions();
    void StatusCheck();
    //=================================================================================================
    void Initialize();
    //=================================================================================================
    void Home(int id);
    //=================================================================================================
    void CleanAndExit();
    //=================================================================================================
    void NewjointDataReceived( );
    //=================================================================================================
    void Timeout();
    //=================================================================================================
    void HommingLoop();
    //=================================================================================================
  //  void FeedBackReceived(QList<int16_t>ft,QList<int32_t>positionAbs,QList<int32_t>positionInc);
   // void FeedBackReceived(QList<int16_t> ft, QList<int32_t> positions, QList<int32_t> positionsInc, QList<int16_t> bump_sensor_list, QList<float> imu_data_list);
    void  FeedBackReceived(QList<int16_t> ft, QList<int32_t> positions,QList<int32_t> positionsInc,QList<uint16_t> bump_sensor_list,QList<float> imu_data_list);
    void SetLed(int id);
    //=================================================================================================
    void ActiveCSP(int id);
    //=================================================================================================
    void ResetAllNodes(int id);
    //=================================================================================================

    void ResetHands();
    void ActivateHands();
    void ActivateLegs();
    void ResetLegs();
};

#endif // ROBOT_H
